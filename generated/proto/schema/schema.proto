// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";

package schema;

// Placement defines an entire storage placement
message Placement {
	map<string, Database> databases = 1;
}

// PlacementChanges defines overall changes to the placement (database adds and removes)
message PlacementChanges {
	map<string, DatabaseAdd> database_adds = 1;
	map<string, DatabaseChanges> database_changes = 2;
}

// DatabaseAdd is an update that adds a database
message DatabaseAdd {
	Database database = 1;
}

// DatabaseProperties are user specifiable properties for a Database
message DatabaseProperties {
	string name = 1;
	int32 num_shards = 2;
	int32 max_retention_in_secs = 3;
}

// Database defines a single database
message Database {
	string name = 1;
	int32 num_shards = 2;
	int32 max_retention_in_secs = 3;
	int64 created_at = 4;
	int64 last_updated_at = 5;
	int64 decommissioned_at = 6;
	int64 read_cutover_time = 7;
	int64 write_cutover_time = 8;
	int64 cutover_complete_time = 9;
	map<string, Cluster> clusters = 10;
	map<string, ClusterShardAssignment> shard_assignments = 11;
	int64 generated_at = 12;
}

// ClusterShardAssignment captures the shards currently assigned to a cluster
message ClusterShardAssignment {
	repeated uint32 shards = 1;
}


// ClusterStatus is the status of a cluster
enum ClusterStatus {
	UNKNOWN = 0;
	ACTIVE = 1;
	DECOMMISSIONING = 2;
}

// ClusterProperties are the user specifiable properties for a Cluster
message ClusterProperties {
	string name = 1;
	string type = 2;
}

// Cluster is the immutable metadata for a cluster
message Cluster {
	string name = 1;
	string type = 2;
	ClusterStatus status = 3;
	int64 created_at = 4;
}

// DatabaseChanges capture pending changes to the database
message DatabaseChanges {
	map<string, ClusterJoin> joins = 1;
	map<string, ClusterDecommission> decomms = 2;
}

// ClusterJoin captures the data required to join a cluster to a database
message ClusterJoin {
	Cluster cluster = 1;
}

// ClusterDecommission captures the data required to decommission a cluster
message ClusterDecommission {
	string cluster_name = 1;
}
